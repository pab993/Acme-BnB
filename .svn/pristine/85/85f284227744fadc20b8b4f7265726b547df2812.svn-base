
package controllers;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.AttributeNameService;
import services.AttributeValueService;
import services.LessorService;
import services.PropertyService;
import domain.Booking;
import domain.Property;

@Controller
@RequestMapping("/property")
public class PropertyController extends AbstractController {

	// Services
	// ====================================================================================

	@Autowired
	private PropertyService			propertyService;

	@Autowired
	private AttributeNameService	attributeNameService;

	@Autowired
	private AttributeValueService	attributeValueService;

	@Autowired
	private LessorService			lessorService;


	// Listing
	// ====================================================================================

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list() {
		ModelAndView result;
		Collection<Property> properties;

		properties = propertyService.findAll();

		result = new ModelAndView("property/list");
		result.addObject("properties", properties);
		result.addObject("requestURI", "property/list.do");

		return result;
	}

	// Create
	// =====================================================================================

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;
		Property property;

		property = propertyService.create();
		result = createEditModelAndView(property);

		return result;
	}

	// Edit
	// ====================================================================================

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam int propertyId) {
		ModelAndView result;
		Property property;

		property = propertyService.findOne(propertyId);
		Assert.notNull(property);
		result = createEditModelAndView(property);

		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(Property property, BindingResult binding) {
		ModelAndView result;
		Property originProperty = propertyService.findOne(property.getId());
		Double oldRate = originProperty.getRate();
		property = propertyService.reconstruct(property, binding);
		if (binding.hasErrors()) {
			result = createEditModelAndView(property);
		} else {
			try {
				for (Booking b : property.getBookings()) {
					if ((b.getStatus().equals("PENDING"))) {
						property.setRate(oldRate);
					}
				}
				propertyService.save(property);
				result = new ModelAndView("redirect:lessor/list.do");
			} catch (Throwable oops) {
				result = createEditModelAndView(property, "property.commit.error");
			}
		}
		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView delete(Property property, BindingResult binding) {
		ModelAndView result;

		property = propertyService.reconstruct(property, binding);
		try {
			propertyService.delete(property);
			result = new ModelAndView("redirect:lessor/list.do");
		} catch (Throwable oops) {
			result = createEditModelAndView(property, "property.commit.error");

		}
		return result;
	}

	// Ancillary Methods
	// ===============================================================================

	protected ModelAndView createEditModelAndView(Property property) {
		ModelAndView result;

		result = createEditModelAndView(property, null);
		return result;
	}

	protected ModelAndView createEditModelAndView(Property property, String message) {
		ModelAndView result;

		result = new ModelAndView("property/edit");
		result.addObject("property", property);
		result.addObject("message", message);

		return result;
	}

}
